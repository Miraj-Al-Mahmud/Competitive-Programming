# Version 16.0
def main() -> None:
    # 2023-07-29 15:00:30
    # https://codeforces.com/contest/1845/problem/C
    for tc in range(ii()):
        s = si()
        dick = defaultdict(list)
        for idx,i in enumerate(s): dick[i].append(idx)
        length = ii()
        start = ii()
        stop = ii()
        store = [i for i in range(start, stop+1)]
        flag = False

        prev = float('-inf')

        for s in store:
            # every number of multiple digits
            # break it down to the digits
            if not flag:
                prev = float('-inf')
                for digit in str(s):
                    # 1 2 3 
                    # if matched then break
                    # else continue
                    if dick[digit]:
                        # check the indexes to increasing order
                        for it,idx in enumerate(dick[digit]):
                            if idx < prev: flag = True; break
                            else:
                                # mark the index , continue
                                if idx==-1: continue
                                else:
                                    dick[digit][it]=-1
                    else: flag = True; break
            else:
                break

        if not flag: p('YES')
        else: p('NO')



            
if __name__ == "__main__":
    #import os,sys,math,itertools;from collections import deque,defaultdict,OrderedDict,Counter
    from collections import defaultdict
    #from bisect import bisect,bisect_left,bisect_right,insort
    #from heapq import heapify,heappush,heappop,nsmallest,nlargest,heapreplace, heappushpop
    ii,si=lambda:int(input()),lambda:input()               
    mi,msi=lambda:map(int,input().strip().split(" ")),lambda:map(str,input().strip().split(" ")) 
    li,lsi=lambda:list(mi()),lambda:list(msi())
    out,export,p,pp=[],lambda:print('\n'.join(map(str, out))),lambda x :out.append(x),lambda array:p(' '.join(map(str,array)))
    try:exec('from hq import L,LT,see,info,cmdIO,_generator_\nline=[cmdIO(),main(),export(),_generator_()]\nfor l in line:l')
    except(FileNotFoundError,ModuleNotFoundError):main();export()